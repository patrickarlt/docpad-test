// Generated by CoffeeScript 1.6.3
var docpadUtil, pathUtil,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

pathUtil = require('path');

module.exports = docpadUtil = {
  getLocalDocPadExecutable: function() {
    return pathUtil.join(process.cwd(), 'node_modules', 'docpad', 'bin', 'docpad');
  },
  isLocalDocPadExecutable: function() {
    var _ref;
    return _ref = docpadUtil.getLocalDocPadExecutable(), __indexOf.call(process.argv, _ref) >= 0;
  },
  getLocalDocPadExecutableExistance: function() {
    return require('safefs').existsSync(docpadUtil.getLocalDocPadExecutable()) === true;
  },
  startLocalDocPadExecutable: function() {
    var args, command;
    args = process.argv.slice(2);
    command = ['node', docpadUtil.getLocalDocPadExecutable()].concat(args);
    return require('safeps').spawn(command, {
      stdio: 'inherit'
    }, function(err) {
      if (err) {
        console.log('An error occured in the child DocPad instance:', err.stack);
        return process.exit(1);
      } else {
        return process.exit(0);
      }
    });
  },
  getBasename: function(filename) {
    var basename;
    if (filename[0] === '.') {
      basename = filename.replace(/^(\.[^\.]+)\..*$/, '$1');
    } else {
      basename = filename.replace(/\..*$/, '');
    }
    return basename;
  },
  getExtensions: function(filename) {
    var extensions;
    extensions = filename.split(/\./g).slice(1);
    return extensions;
  },
  getExtension: function(extensions) {
    var extension;
    if (!require('typechecker').isArray(extensions)) {
      extensions = docpadUtil.getExtensions(extensions);
    }
    if (extensions.length !== 0) {
      extension = extensions.slice(-1)[0] || null;
    } else {
      extension = null;
    }
    return extension;
  },
  getDirPath: function(path) {
    return pathUtil.dirname(path) || '';
  },
  getFilename: function(path) {
    return pathUtil.basename(path);
  },
  getOutFilename: function(basename, extension) {
    if (basename === '.' + extension) {
      return basename;
    } else {
      return basename + (extension ? '.' + extension : '');
    }
  },
  getUrl: function(relativePath) {
    return '/' + relativePath.replace(/[\\]/g, '/');
  },
  getSlug: function(relativeBase) {
    return require('bal-util').generateSlugSync(relativeBase);
  }
};
